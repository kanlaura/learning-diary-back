{"version":3,"sources":["diary.webp","components/Navigation.js","components/Post.js","restService.js","components/Posts.js","components/NewPost.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navigation","className","to","Component","Post","state","id","props","post","title","description","timetomaster","source","startlearningdate","moment","format","inprogress","finishlearningdate","timespent","display","handleChanges","event","setState","target","name","value","showNot","editRow","deleteRow","delPost","edit","a","edPost","showEdit","this","Paper","elevation","type","placeholder","onChange","htmlFor","onClick","handleRadio","href","URL","editPost","axios","put","editedPost","addPost","newPost","getPosts","get","posts","deletePost","delete","deleted","Posts","useState","setPost","fetchData","data","useEffect","map","i","key","AddNewPost","Date","info","setInfo","submit","console","log","Home","App","src","logo","alt","path","exact","component","NewPost","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bc8a297b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/diary.b5670962.webp\";","import React, { Component } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\nexport default class Navigation extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"naviClass\">\r\n                <NavLink to=\"/\">Home</NavLink>\r\n                <NavLink to=\"/posts\">Posts</NavLink>\r\n                <NavLink to=\"/new\">Add New</NavLink>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport moment from 'moment';\r\nimport { Paper } from '@material-ui/core';\r\n\r\nexport default class Post extends Component {\r\n    state = ({\r\n        id: this.props.post.id,\r\n        title: this.props.post.title,\r\n        description: this.props.post.description,\r\n        timetomaster: this.props.post.timetomaster,\r\n        source: this.props.post.source,\r\n        startlearningdate: moment(this.props.post.startlearningdate).format('YYYY-MM-DD'),\r\n        inprogress: this.props.post.inprogress,\r\n        finishlearningdate: moment(this.props.post.finishlearningdate).format('YYYY-MM-DD'),\r\n        timespent: this.props.post.timespent,\r\n        display: false\r\n    })\r\n\r\n    handleChanges = (event) => {\r\n        this.setState({ ...this.state, [event.target.name]: event.target.value });\r\n    }\r\n\r\n    showNot = () => {\r\n        this.state.display ? this.setState({ ...this.state, display: false }) : this.setState({ ...this.state, display: true })\r\n    }\r\n\r\n    editRow = () => {\r\n        this.showNot();\r\n    }\r\n\r\n    deleteRow = () => {\r\n        this.props.delPost(this.props.post.id)\r\n    }\r\n\r\n    edit = async () => {\r\n        await this.props.edPost(this.state)\r\n        this.showNot();\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const showEdit = this.state.display ? <Paper className=\"editPost\" elevation={3}><form>\r\n            <h4>Edit post</h4>\r\n            <input type=\"text\" placeholder=\"Title\" name=\"title\" value={this.state.title} onChange={this.handleChanges} />\r\n            <br />\r\n            <input type=\"text\" placeholder=\"Description\" name=\"description\" value={this.state.description} onChange={this.handleChanges} />\r\n            <br />\r\n            <input type=\"date\" placeholder=\"Startlearningdate\" name=\"startlearningdate\" value={this.state.startlearningdate} onChange={this.handleChanges} />\r\n            <br />\r\n            <label htmlFor=\"timetomaster\">Estimated working time</label>\r\n            <br />\r\n            <input type=\"number\" name=\"timetomaster\" value={this.state.timetomaster} onChange={this.handleChanges} />\r\n            <br />\r\n            <input type=\"text\" placeholder=\"Source\" name=\"source\" value={this.state.source} onChange={this.handleChanges} />\r\n            <br />\r\n            <label htmlFor=\"inprogress\">Inprogress</label>\r\n            <br />\r\n            <label htmlFor=\"inprogressYes\">yes</label>\r\n            <input type=\"radio\" value=\"1\" name=\"inprogress\" onClick={this.handleRadio} />\r\n            <label htmlFor=\"inprogressNo\">no</label>\r\n            <input type=\"radio\" value=\"0\" name=\"inprogress\" onClick={this.handleRadio} />\r\n            <br />\r\n            <input type=\"date\" placeholder=\"Finishlearningdate\" name=\"finishlearningdate\" value={this.state.finishlearningdate} onChange={this.handleChanges} />\r\n            <br /><br />\r\n            <button type=\"button\" onClick={this.edit}>Edit post</button>\r\n        </form></Paper> : null\r\n        const { id, title, description, timetomaster, timespent, source, startlearningdate, inprogress, finishlearningdate } = this.props.post\r\n        return (\r\n            <Paper className=\"postBox\">\r\n                <div>\r\n                <p className=\"Title\"><b>{id} {title}</b></p>\r\n                <p>{description}</p>\r\n                <p>Planned working hours: {timetomaster}</p>\r\n                <a href={`http://${source}`}>{source}</a>\r\n                <p>{moment(startlearningdate).format('DD.MM.YYYY')}</p>\r\n                <p>{moment(finishlearningdate).format('DD.MM.YYYY')}</p>\r\n                <p>time spent: {timespent}</p>\r\n                <p>{inprogress == 0 ? 'inprogress' : 'finnished'}</p>\r\n                </div>\r\n                <div className=\"postButtons\">\r\n                    <button onClick={this.deleteRow}>delete</button>\r\n                    <button onClick={this.editRow}>edit</button>\r\n                </div>\r\n                {showEdit}\r\n            </Paper>\r\n        )\r\n    }\r\n}\r\n","import axios from 'axios';\r\n\r\nconst URL = \"http://weeklylaura-ebenv.eba-yvpgbuzq.eu-west-1.elasticbeanstalk.com/api\"\r\n\r\nexport const editPost = async (post) => {\r\n    let editedPost = await axios.put(`${URL}/${post.id}`, post)\r\n    return editedPost;\r\n}\r\n\r\nexport const addPost = async (post) => {\r\n    let newPost = await axios.post(URL, post)\r\n    return newPost;\r\n}\r\n\r\nexport const getPosts = async () => {\r\n    let posts = await axios.get(URL)\r\n    return posts;\r\n}\r\n\r\nexport const deletePost = async (id) => {\r\n    let deleted = await axios.delete(`${URL}/${id}`)\r\n    return deleted;\r\n}","import React, { useState, useEffect } from 'react';\r\nimport Post from './Post.js';\r\nimport { Paper } from '@material-ui/core';\r\nimport { getPosts, deletePost, editPost } from '../restService';\r\n\r\nexport default function Posts() {\r\n    const [post, setPost] = useState({ posts: [] });\r\n\r\n    async function fetchData() {\r\n        const post = await getPosts();\r\n        setPost({ posts: post.data });\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchData()\r\n    }, []);\r\n\r\n    const delPost = async (id) => {\r\n        await deletePost(id)\r\n        fetchData();\r\n    }\r\n\r\n    const edPost = async (post) => {\r\n        await editPost(post);\r\n        fetchData();\r\n    }\r\n\r\n    return (\r\n        <Paper elevation={3} className=\"allPosts\">\r\n            <h2>Posts</h2>\r\n            <div className=\"postsBox\">\r\n                {post.posts.map((post, i) => (\r\n                    < Post post={post} key={post.id} delPost={delPost} edPost={edPost} />\r\n                ))}\r\n            </div>\r\n        </Paper>\r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\nimport moment from 'moment';\r\nimport { Paper } from '@material-ui/core';\r\nimport { addPost } from '../restService';\r\n\r\nconst AddNewPost = () => {\r\n    const [info, setInfo] = useState({\r\n        title: \"\",\r\n        description: \"\",\r\n        timetomaster: 0,\r\n        source: \"\",\r\n        startlearningdate: moment(new Date()).format('YYYY-MM-DD'),\r\n        inprogress: 0,\r\n        finishlearningdate: moment(new Date()).format('YYYY-MM-DD'),\r\n        timespent: 0\r\n    });\r\n\r\n    const handleChanges = (event) => {\r\n        setInfo({ ...info, [event.target.name]: event.target.value });\r\n    }\r\n\r\n    const handleRadio = (event) => {\r\n        setInfo({ ...info, inprogress: event.target.value });\r\n    }\r\n\r\n    const submit = async () => {\r\n        console.log(info)\r\n        let newPost = addPost(info)\r\n        return newPost\r\n    }\r\n\r\n    return (\r\n        <Paper elevation={3} className=\"newPost\">\r\n            <h2>Add new</h2>\r\n            <form>\r\n                <input type=\"text\" placeholder=\"Title\" name=\"title\" value={info.title} onChange={handleChanges} />\r\n                <br />\r\n                <input type=\"text\" placeholder=\"Description\" name=\"description\" value={info.description} onChange={handleChanges} />\r\n                <br />\r\n                <input type=\"date\" placeholder=\"Startlearningdate\" name=\"startlearningdate\" value={info.startlearningdate} onChange={handleChanges} />\r\n                <br />\r\n                <label htmlFor=\"timetomaster\">Estimated working time</label>\r\n                <br />\r\n                <input type=\"number\" name=\"timetomaster\" value={info.timetomaster} onChange={handleChanges} />\r\n                <br />\r\n                <input type=\"text\" placeholder=\"Source\" name=\"source\" value={info.source} onChange={handleChanges} />\r\n                <br />\r\n                Inprogress\r\n                <br />\r\n                <label htmlFor=\"inprogressYes\">yes</label>\r\n                <input type=\"radio\" value=\"1\" name=\"inprogress\" onClick={handleRadio} />\r\n                <label htmlFor=\"inprogressNo\">no</label>\r\n                <input type=\"radio\" value=\"0\" name=\"inprogress\" onClick={handleRadio} />\r\n                <br />\r\n                <input type=\"date\" placeholder=\"Finishlearningdate\" name=\"finishlearningdate\" value={info.finishlearningdate} onChange={handleChanges} />\r\n                <br /><br />\r\n                <button type=\"button\" onClick={submit}>Add new</button>\r\n            </form>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default AddNewPost","import React from 'react';\nimport './App.css';\nimport logo from './diary.webp';\nimport Navigation from './components/Navigation';\nimport Posts from './components/Posts';\nimport NewPost from './components/NewPost';\nimport { BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport { Paper } from '@material-ui/core';\n\n\nfunction App() {\n  return (\n    < Router>\n      <div className=\"App\">\n      <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1>My learning diary</h1>\n        < Navigation />\n        </header>\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/posts\" component={Posts} />\n          <Route path=\"/new\" component={NewPost} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nconst Home = () => (\n  <Paper elevation={3} className=\"Home\">\n    <h1>Home page!!!</h1>\n  </Paper>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}